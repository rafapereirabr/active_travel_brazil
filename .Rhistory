pnad2008 <- readRDS("./data/pnad2008.Rds")
library(ggplot2)
df <- as.data.frame(x=5,y=10)
ggplot(df, aes(x, y)) +
geom_point() +
stat_ellipse()
df
View(df)
df <- as.data.frame(x=c(5),y=c(10))
View(df)
df <- data.frame(x=c(5),y=c(10))
View(df)
ggplot(df, aes(x, y)) +
geom_point() +
stat_ellipse()
ggplot(df, aes(x, y)) +
geom_point()
ggplot(df, aes(x, y)) +
geom_point() +
stat_ellipse()
ggplot(df, aes(x, y)) +
geom_point(size=50, shape=1)
ggplot() +  geom_polygon(data=world, aes(x=long, y=lat, group=group))
all_states <- map_data("world")
ggplot() +  geom_polygon(data=all_states, aes(x=long, y=lat, group=group))
ggplot() +  geom_polygon(data=map_data("world"), aes(x=long, y=lat, group=group))
ggplot() +
geom_polygon(data=map_data("world"), aes(x=long, y=lat, group=group)) +
geom_point(data=yourtable, aes(long, lat), size=50, shape=1) +
coord_equal()
ggplot() +
geom_polygon(data=map_data("world"), aes(x=long, y=lat, group=group)) +
#geom_point(data=yourtable, aes(long, lat), size=50, shape=1) +
coord_equal()
ggplot() +
geom_polygon(data=map_data("sweden"), aes(x=long, y=lat, group=group))
ggplot() +
geom_polygon(data=map_data("Sweden"), aes(x=long, y=lat, group=group))
ggplot() +
geom_polygon(data=map_data("country"), aes(x=long, y=lat, group=group))
?fwrite
??fwrite
install.packages(c("colorspace", "maptools", "Rcpp", "rgdal"))
set.seed(1)
library(data.table)
set.seed(1)
DT = as.data.table(lapply(1:10, sample, x=as.numeric(1:5e7), size=5e6))  #  382MB
system.time(fwrite(DT, "tmp1.csv"))                             #  0.8s
x <- array(rep(1, 365*5000*4000), dim=c(365, 5000, 4000))
someData <- rep(0, 365*5000*4000)
someData <- rep(0, 365*6*4)
someData <- rep(0, 365*6*40)
someData <- rep(0, 365*6*4000)
rm(list=setdiff(ls())
rm(list=ls())
rm(list=ls())
gc(reset = T)
someData <- rep(0, 365*600*4000)
rm(list=ls())
gc(reset = T)
gc(reset = T)
someData <- rep(0, 365*3000*3000)
someData <- rep(0, 365*300*3000)
24*60
rm(list=ls())
gc(reset = T)
someData <- rep(0, 1440*300*3000)
head(someData)
x <- array(rep(1, 365*5*4), dim=c(365, 5, 4))
someData <- rep(NaN, 1440*300*3000)
rm(list=ls())
rm(list=ls())
gc(reset = T)
x <- array(rep(1, 365*5*4), dim=c(365, 5, 4))
x[305, , ]
df <- as.data.frame(x[305, , ])
df
1200/8
remove.packages("data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table")
library(data.table)
a <- data.frame(x=c(1:10000000))
setDT(a)
system.time (  saveRDS(a, file="a.Rds", compress=T) ) #  661.93 sec
system.time ( fwrite(matrix500, file="a.csv") )
system.time ( fwrite(a, file="a.csv") )
a <- data.frame(x=c(1:100000000))
setDT(a)
system.time (  saveRDS(a, file="a.Rds", compress=T) ) #  661.93 sec
system.time ( fwrite(a, file="a.csv") )
library(data.table)
a <- data.frame(x=c(1:100000000))
setDT(a)
system.time (  saveRDS(a, file="a.Rds", compress=T) ) #  661.93 sec
system.time ( fwrite(a, file="a.csv") )
system.time (  save(a, file="a.Rdata", compress=T) ) #  661.93 sec
gc(reset = T)
system.time ( a <-  readRDS("a.Rds") ) #   sec
gc(reset = T)
system.time (  load("a.Rdata") ) #   sec
gc(reset = T)
system.time ( a <- fread("a.csv") )
20/250
20/250*100
pdffile <- "R:/Dropbox/Dout/Data Dout/Rio transit stats/RDO_2016-05.pdf"
library(pdftools)
text <- pdf_text(pdffile)
cat(text[1])
out1 <- extract_tables(text)
https://www.r-bloggers.com/extracting-tables-from-pdfs-in-r-using-the-tabulizer-package/
library(tabulizer)
install.packages("tabulizer")
https://www.r-bloggers.com/extracting-tables-from-pdfs-in-r-using-the-tabulizer-package/
library(tabulizer)
text[1]
out1 <- extract_tables(text[1])
https://www.r-bloggers.com/extracting-tables-from-pdfs-in-r-using-the-tabulizer-package/
library(tabulizer)
1library(tabulizer)
library(tabulizer)
install.packages("tabulizer")
if(!require("ghit")){
install.packages("ghit")
}
# on 64-bit Windows
ghit::install_github(c("ropenscilabs/tabulizerjars", "ropenscilabs/tabulizer"), INSTALL_opts = "--no-multiarch")
pdffile <- "R:/Dropbox/Dout/Data Dout/Rio transit stats/RDO_2016-05.pdf"
library(pdftools)
text <- pdf_text(pdffile)
library(pdftools)
pdffile <- "R:/Dropbox/Dout/Data Dout/Rio transit stats/RDO_2016-05.pdf"
text <- pdf_text(pdffile)
library(pdftools)
devtools::install_github('wilsonfreitas/rbcb')
rbcb::get_series(1)
rbcb::get_series(21340)
a <- rbcb::get_series(21340)
View(a)
plot(a$valor)
max(a$valor)
b <- max(a$valor)
View(a)
?get_series
??get_series
??get_series
a <- rbcb::get_series(21340, s = 'data.frme')
IVGR <- rbcb::get_series(21340, s = 'data.frme')
a <- rbcb::get_series(17868, s = 'data.frme') # IVG-R
plot(a$valor)
a <- rbcb::get_series(17866, s = 'data.frme') # IVG-R
plot(a$valor)
a <- rbcb::get_series(14062, s = 'data.frme') # IVG-R
plot(a$valor)
devtools::install_github('wilsonfreitas/rbcb')
IVGR <- rbcb::get_series(21340, s = 'data.frme')
library(rbcb)
library(ggplot2)
IVGR <- get_series(21340, s = 'data.frme')
IVGR <- get_series(21340)
IVGR
ggplot(data=IVGR) + geom_point( aes(x=data, y=valor))
ggplot(data=IVGR) + geom_line( aes(x=data, y=valor))
ggplot(data=IVGR) + geom_line( aes(x=data, y=valor, color=valor))
library(XML)
u <- 'http://cnes2.datasus.gov.br/geo.asp?VUnidade=3304552295423'
doc <-  xmlTreeParse(u, useInternal=TRUE)
library(XML)
u <- 'http://cnes2.datasus.gov.br/geo.asp?VUnidade=3304552295423'
doc <-  xmlTreeParse(u, useInternal=TRUE)
library(data.table)
library(pbapply)
library(beepr)
library(ggplot2)
library(fasttime)
########## get file names -------------------------------------------------------
filenames <- list.files("R:/Dropbox/bases_de_dados/GPS/gps_Rio_2016-10csv", pattern=".csv", full.names=TRUE)
filenames <- fread(filenames, nrows=3)
filenames
library(data.table)
library(pbapply)
library(beepr)
library(ggplot2)
library(fasttime)
filenames <- list.files("R:/Dropbox/bases_de_dados/GPS/gps_Rio_2016-10csv", pattern=".csv", full.names=TRUE)
filenames
filenames <- fread(filenames, nrows=3)
filenames
filenames <- list.files("R:/Dropbox/bases_de_dados/GPS/gps_Rio_2016-10csv", pattern=".csv", full.names=TRUE)
system.time( gps_Rio_2016_10 <- fread(filenames, nrows=3) )
system.time( gps_Rio_2016_10 <- fread(filenames) )
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
head(gps_Rio_2016_10)
Quality test -------------------
# missing levels:
# indice:       0%
# date:         0%
# vehicle_id:   0%
# route_id:     0%
# lat:          0%
# long:         0%
# speed:        0%
sum(is.na(gps_Rio_2016_10$ id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora_registro)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora_registro)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$ordem)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
options(scipen=999) # disable scientific notation
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
gps_Rio_2016_10[, linha :=ifelse(lina==""), NA, linha ]
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha ]
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$ id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora_registro)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$ordem)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
nrow(gps_Rio_2016_10)
totalrows <- nrow(gps_Rio_2016_10)
totalrows <- nrow(gps_Rio_2016_10)  *100
totalrows <- nrow(gps_Rio_2016_10)  *100
sum(is.na(gps_Rio_2016_10$id)) / totalrows
sum(is.na(gps_Rio_2016_10$datahora_registro)) / totalrows
sum(is.na(gps_Rio_2016_10$datahora)) / totalrows
sum(is.na(gps_Rio_2016_10$ordem)) / totalrows
sum(is.na(gps_Rio_2016_10$linha)) / totalrows
names(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$latitude))                     / totalrows
head(gps_Rio_2016_10)
# this script joins all gps csv files into one single file
library(data.table)
library(pbapply)
library(beepr)
library(ggplot2)
library(fasttime)
options(scipen=999) # disable scientific notation
########## get file names -------------------------------------------------------
filenames <- list.files("R:/Dropbox/bases_de_dados/GPS/gps_Rio_2016-10csv", pattern=".csv", full.names=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
system.time( gps_Rio_2016_10 <- fread(filenames) )
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
head(gps_Rio_2016_10)
strsplit(substr(gsub("\\s+", "", "Getty"), 1, 2), '')
strsplit(substr(gsub("\\s+", "", "Getty"), 1, 2))
substr("abcdef", 0, 3)
gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
head(gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
)
head(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
totalrows <- nrow(gps_Rio_2016_10)  *100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido)))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))] / totalrows
totalrows <- nrow(gps_Rio_2016_10)  *100
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))] / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id))), by=day] / totalrows
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id))), by=day]
df <- gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
df
summary(df$sentido_NA)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
df
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
Quality test -------------------
# missing levels:
# linha:                    13%       ----------- Route_short_Name
# sentido:                  26%       -----------
# sentido_itinerario_id:    44%       ----------- trip_id que corresponde a um sentido
# route_name:               30.4%     -----------
# correct NA info
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
head(gps_Rio_2016_10)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name))  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows * 100 ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
summary(df$test)
table(gps_Rio_2016_10$day)
a <-  table(gps_Rio_2016_10$day)
a <-  table(gps_Rio_2016_10$day) %>% setDT()
a
a > "2016-09-23"
a < "2016-09-23"
a < "2016-09-23"
table(gps_Rio_2016_10$day)
a < "2016-09-25"
a <- gps_Rio_2016_10[, day == "2016-07-30")]
a <- gps_Rio_2016_10[ day == "2016-07-30")]
a <- gps_Rio_2016_10[ day == "2016-07-30"]
a
a[, day2 := fastPOSIXct(day)]
class(a$day2)
head(a)
a[, day2 := format(day2, , format="%D:%M")]
head(a)
a[, day2 := format(day2, , format="%D")]
head(a)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
a[, day2 := fastPOSIXct(day)]
head(a)
gps_Rio_2016_10[, day2 := fastPOSIXct(day)]
table(gps_Rio_2016_10$day2)
table(gps_Rio_2016_10$day)
df <- gps_Rio_2016_10[ day > "2016-10-01 21:00:00"]
table(df$day)
rm(gps_Rio_2016_10)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gps_Rio_2016_10 <<- df
rm(df)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
Quality test -------------------
# missing levels:
# linha:                    13%       ----------- Route_short_Name
# sentido:                  26%       -----------
# sentido_itinerario_id:    44%       ----------- trip_id que corresponde a um sentido
# route_name:               30.4%     -----------
# correct NA info
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$id))                     / totalrows * 100
sum(is.na(gps_Rio_2016_10$datahora_registro))      / totalrows * 100
sum(is.na(gps_Rio_2016_10$datahora))               / totalrows * 100
sum(is.na(gps_Rio_2016_10$ordem))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
totalrows <- nrow(gps_Rio_2016_10) * 1/100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha))  / totalrows  ), by=day]
summary(df$test)
totalrows <- nrow(gps_Rio_2016_10) * 1/100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha))  / totalrows  ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows
plot(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows  ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df[ test < .5]
head ( gps_Rio_2016_10[ day == "2016-10-03" ] )
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df[ test > 1.9]
head ( gps_Rio_2016_10[ day == "2016-10-12" ] )
gps_Rio_2016_10[ day == "2016-10-12" ]
df[ test < .5]
gps_Rio_2016_10[ day == "2016-10-03" ]
remove.packages("microdadosBrasil")
removeDepends("microdadosBrasil")
library(microdadosBrasil)
devtools::install_github("lucasmation/microdadosBrasil")
library(microdadosBrasil)
setwd("R:/Dropbox/github/active_travel_brazil") # test
a <-       read_PNS("domicilios",i = 2013, root_path = path.expand("~/data/PNS2013"))
a <-       read_PNS("domicilios",i = 2013, root_path = path.expand("./data/PNS2013"))
??download_sourceData
unzip("./data/PNS2013.zip", exdir="./data/PNS2013")
a <-       read_PNS("domicilios",i = 2013, root_path = path.expand("./data/PNS2013"))
download_sourceData("PNS", 2013, unzip = T, dest = "./data/test")
?download_sourceData
??download_sourceData
download_sourceData("PNAD", 2013, unzip = T, dest = "./data/test")
download_sourceData("PNAD", 2013, unzip = T, dest = "./data")
download_sourceData("PNAD", 2013, unzip = T)
a <-       read_PNS("domicilios",i = 2013)
a <-       read_PNS("domicilios",i = 2013, root_path = path.expand("."))
download_sourceData("PNAD", 2013, unzip = T, root_path = "./data")
download_sourceData("PNAD", 2013, unzip = T, root_path = "./data")
