sum(is.na(gps_Rio_2016_10$ordem)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
options(scipen=999) # disable scientific notation
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
gps_Rio_2016_10[, linha :=ifelse(lina==""), NA, linha ]
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha ]
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$ id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora_registro)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$datahora)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$ordem)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$linha)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$velocidade)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id)) / nrow(gps_Rio_2016_10) *100
sum(is.na(gps_Rio_2016_10$route_name)) / nrow(gps_Rio_2016_10) *100
nrow(gps_Rio_2016_10)
totalrows <- nrow(gps_Rio_2016_10)
totalrows <- nrow(gps_Rio_2016_10)  *100
totalrows <- nrow(gps_Rio_2016_10)  *100
sum(is.na(gps_Rio_2016_10$id)) / totalrows
sum(is.na(gps_Rio_2016_10$datahora_registro)) / totalrows
sum(is.na(gps_Rio_2016_10$datahora)) / totalrows
sum(is.na(gps_Rio_2016_10$ordem)) / totalrows
sum(is.na(gps_Rio_2016_10$linha)) / totalrows
names(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$latitude))                     / totalrows
head(gps_Rio_2016_10)
# this script joins all gps csv files into one single file
library(data.table)
library(pbapply)
library(beepr)
library(ggplot2)
library(fasttime)
options(scipen=999) # disable scientific notation
########## get file names -------------------------------------------------------
filenames <- list.files("R:/Dropbox/bases_de_dados/GPS/gps_Rio_2016-10csv", pattern=".csv", full.names=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
system.time( gps_Rio_2016_10 <- fread(filenames) )
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
head(gps_Rio_2016_10)
strsplit(substr(gsub("\\s+", "", "Getty"), 1, 2), '')
strsplit(substr(gsub("\\s+", "", "Getty"), 1, 2))
substr("abcdef", 0, 3)
gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
head(gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
)
head(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
totalrows <- nrow(gps_Rio_2016_10)  *100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido)))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))]
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))] / totalrows
totalrows <- nrow(gps_Rio_2016_10)  *100
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)))] / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id))), by=day] / totalrows
gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id))), by=day]
df <- gps_Rio_2016_10[, .(sentido_NA = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
df
summary(df$sentido_NA)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
df
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
Quality test -------------------
# missing levels:
# linha:                    13%       ----------- Route_short_Name
# sentido:                  26%       -----------
# sentido_itinerario_id:    44%       ----------- trip_id que corresponde a um sentido
# route_name:               30.4%     -----------
# correct NA info
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows * 100 ), by=day]
summary(df$sentido_NA)
head(gps_Rio_2016_10)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name))  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows * 100 ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows * 100 ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows * 100 ), by=day]
summary(df$test)
table(gps_Rio_2016_10$day)
a <-  table(gps_Rio_2016_10$day)
a <-  table(gps_Rio_2016_10$day) %>% setDT()
a
a > "2016-09-23"
a < "2016-09-23"
a < "2016-09-23"
table(gps_Rio_2016_10$day)
a < "2016-09-25"
a <- gps_Rio_2016_10[, day == "2016-07-30")]
a <- gps_Rio_2016_10[ day == "2016-07-30")]
a <- gps_Rio_2016_10[ day == "2016-07-30"]
a
a[, day2 := fastPOSIXct(day)]
class(a$day2)
head(a)
a[, day2 := format(day2, , format="%D:%M")]
head(a)
a[, day2 := format(day2, , format="%D")]
head(a)
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
gps_Rio_2016_10[, day := substr( datahora, 0, 10) ]
a[, day2 := fastPOSIXct(day)]
head(a)
gps_Rio_2016_10[, day2 := fastPOSIXct(day)]
table(gps_Rio_2016_10$day2)
table(gps_Rio_2016_10$day)
df <- gps_Rio_2016_10[ day > "2016-10-01 21:00:00"]
table(df$day)
rm(gps_Rio_2016_10)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
gps_Rio_2016_10 <<- df
rm(df)
gc(reset=TRUE)
gc(reset=TRUE)
gc(reset=TRUE)
Quality test -------------------
# missing levels:
# linha:                    13%       ----------- Route_short_Name
# sentido:                  26%       -----------
# sentido_itinerario_id:    44%       ----------- trip_id que corresponde a um sentido
# route_name:               30.4%     -----------
# correct NA info
gps_Rio_2016_10[, linha := ifelse(linha=="", NA, linha) ]
gps_Rio_2016_10[, sentido := ifelse(sentido=="Indefinido", NA, sentido) ]
totalrows <- nrow(gps_Rio_2016_10)
sum(is.na(gps_Rio_2016_10$id))                     / totalrows * 100
sum(is.na(gps_Rio_2016_10$datahora_registro))      / totalrows * 100
sum(is.na(gps_Rio_2016_10$datahora))               / totalrows * 100
sum(is.na(gps_Rio_2016_10$ordem))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows * 100
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows * 100
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows * 100
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows * 100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha)) / totalrows * 100 ), by=day]
summary(df$test)
totalrows <- nrow(gps_Rio_2016_10) * 1/100
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$velocidade))             / totalrows
sum(is.na(gps_Rio_2016_10$sentido))                / totalrows
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
sum(is.na(gps_Rio_2016_10$route_name))             / totalrows
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha))  / totalrows  ), by=day]
summary(df$test)
totalrows <- nrow(gps_Rio_2016_10) * 1/100
df <- gps_Rio_2016_10[, .(test = sum(is.na(linha))  / totalrows  ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$linha))                  / totalrows
plot(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(route_name)) / totalrows  ), by=day]
summary(df$test)
sum(is.na(gps_Rio_2016_10$sentido_itinerario_id))  / totalrows
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df[ test < .5]
head ( gps_Rio_2016_10[ day == "2016-10-03" ] )
df <- gps_Rio_2016_10[, .(test = sum(is.na(sentido_itinerario_id)) / totalrows  ), by=day]
summary(df$test)
df[ test > 1.9]
head ( gps_Rio_2016_10[ day == "2016-10-12" ] )
gps_Rio_2016_10[ day == "2016-10-12" ]
df[ test < .5]
gps_Rio_2016_10[ day == "2016-10-03" ]
gc()
gc(reset = T)
gc(reset = T)
gc(reset = T)
2+2
library(maps)
library(ggplot2)
library(rworldmap)
library(ggthemes)
library(data.table)
library(RColorBrewer)
library(maps)
library(ggplot2)
library(rworldmap)
library(ggthemes)
library(data.table)
library(RColorBrewer)
options(digits=3)   # number of digits to show
options(scipen=999) # disable scientific notation
library(plotly)
??rworldmap
data("world.cities")
world.cities <- setDT(world.cities)
head(world.cities)
worldMap <- getMap()
largecities
world.cities
data(countryExData)
library(rworldmap)
install.packages("rworldmap")
library(maps)
library(ggplot2)
library(rworldmap)
library(ggthemes)
library(data.table)
library(RColorBrewer)
data(countryExData)
mapDevice()
map('worldHires')
map('worldHires','Italy')
install.packages("maps")
install.packages("mapdata")
install.packages("maps")
map('worldHires','Italy')
library(maps)
library(mapdata) # https://www.students.ncl.ac.uk/keith.newman/r/maps-in-r
map('worldHires','Italy')
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90))
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
library(maps)
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE)
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE) %>% setDT()
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE)
df
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F);
library(data.table)
library(reshape)
library(pbapply)
library(ggplot2)
library(magrittr
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F);
rm(df)
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F)
df
dcast(df, ID ~ Smoke)
dcast(df, var ~ Smoke)
read.excel <- function(header=TRUE,...) { read.table("clipboard",sep="\t",header=header,...) }
df <- read.excel()
df
dcast(df)
dput(df)
df2 <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
df2
### DECAST MEL  REshape
# ftp://cran.r-project.org/pub/R/web/packages/data.table/vignettes/datatable-reshape.html
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
DT
colnames(DT) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
DT.m1 = melt(DT, id.vars = c("family_id", "age_mother"),
measure.vars = c("dob_child1", "dob_child2", "dob_child3"))
DT.m1
DT.m1 = melt(DT, measure.vars = c("dob_child1", "dob_child2", "dob_child3"),
variable.name = "child", value.name = "dob")
head(DT.m1)
dcast(DT.m1, family_id + age_mother ~ child, value.var = "dob")
DT.m1
DT.m1
DT2 <- DT
colnames(DT2) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT
DT2
DT
melt(DT, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
head(DT)
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "acess", value.name = "year")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
DT
colnames(DT2) <- c('origin', 'year', 'acess1', 'acess2', 'acess3')
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
head(DT)
DT2 <- DT
colnames(DT2) <- c('origin', 'year', 'acess1', 'acess2', 'acess3')
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "decile", value.name = "year")
DT
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "decile", value.name = "acess")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT2
colnames(DT2) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
rep(2000, 2)
DT2.m1$year <- c(rep(2000, 5), rep(2010, 5), rep(2020, 5))
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
DT.m1
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
head(DT)
DT
colnames(DT2) <- c('origin', 'decile', 'acess2000', 'acess2010', 'acess2020')
DT2 <- DT
colnames(DT2) <- c('origin', 'decile', 'acess2000', 'acess2010', 'acess2020')
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2
DT2.m1 <-  melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2.m1
DT2.m1 <-  melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
##################### Set working directory -------------------------------------------------------
setwd("R:/Dropbox/github/active_travel_brazil") # test
##################### Load packages -------------------------------------------------------
source("./R-scripts/0 LoadPackages.R")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "./data/PNS2013")
library(microdadosBrasil)
library(stringi)
library(devtools)
devtools::install_github("lucasmation/microdadosBrasil")
library('microdadosBrasil')
download_sourceData("PNS", 2013, unzip = T, root_path = "./data")
download_sourceData("PNS", 2013, unzip = T)
download_sourceData("PNS", 2013, unzip = T)
download_sourceData("PNS", 2013, unzip = T, root_path = "./data")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013/Dados")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop/PNS2013/Dados")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = ".")
download_sourceData("PNS", 2013, unzip = T, root_path = "./data")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "./data")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "C:/Users/rafa/Desktop")
