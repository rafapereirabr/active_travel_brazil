pnad2008dom[v2032==0, v2032 := NA]
pnad2008dom[v2032==2, v2032 := "Car"]
setDT(pnad2008dom)
pnad2008dom[uf < 20, region :="North"]
pnad2008dom[uf > 20 & uf < 30, region :="Northeast"]
pnad2008dom[uf > 30 & uf < 40, region :="Southeast"]
pnad2008dom[uf > 40 & uf < 50, region :="South"]
pnad2008dom[uf > 50 & uf < 60, region :="Midwest"]
table(pnad2008dom$region)
# urban x rural
pnad2008dom[v4105<4, urban := "Urban"]
pnad2008dom[v4105>3 & v4105<9, urban := "Rural"]
table(pnad2008dom$urban)
# vehicle ownership variable, make it compatible with PNAD
pnad2008[, v2032 := as.character(v2032)]
pnad2008[, v2032 := as.character(v2032)]
pnad2008dom[v2032==2, v2032 := "Car"]
pnad2008dom[v2032==4, v2032 := "Motorcycle"]
load("./data/PNAD2008/dicPNAD2008.RData")
# conVert to data.table
setDT(dicpes2008)
setDT(dicdom2008)
# Indicate which columns will be read
# indiViduals data
mycolsPES <- c( "V0101", # year
"UF",    # State
"V0102", # Numero de controle
"V0103", # Numero de serie
"V0403", # Family number
"V4729", # Person Weight
"V4732", # Family Weight
"V8005", # age
"V0302", # Sex
"V0404", # race
"V4803", # Years of schooling
"V4745", # Educational attainment
"V4727", # Metropolitan area
"V9005", # Number of jobs
"V4805", # Employment Status
"V4706", # Job position
"V4810", # Job sectos
"V4721", # Household Income per Capita
"v4721", # Family Income per Capita
"V9054", # Work location
"V9055", # Work at home
"V9056", # Directo commute from home to work
"V9057", # Commute time
"V1409", # walking difficulties due to health condition
"V14091",# shoping difficulties due to health condition
"V1410", # ActiVe commute
"V1411", # ActiVe commute time
"V2801") # Smoker
# household data
mycolsDOM <- c("V0101", # year
"UF",    # State
"V0102", # NÃƒÂºmero de controle
"V0103", # NÃƒÂºmero de serie
"V0403", # Family number
"V4729", # Person Weight
"V4732", # Family Weight
"V4105", # Urban Vs Rural
"V2032", # Car or motorcycle ownership
"V4602", # Strata
"V4617", # STRAT
"V4609", # Population Projection
"UPA",   # DelimitaÃƒÂ§ÃƒÂ£o do municÃƒ­pio
"V4618", # PSU - Unidade primÃƒÂ¡ria de amostragem
"V4619", # Fator de subamostragem
"V4610", # InVerso da fraÃƒÂ§ÃƒÂ£o
"V4611", # Household weight
"V0233", # Household registered in 'saude da familia' program
"V0234") # time since registration
# Filter selected Variables
dicpes2008 <- dicpes2008[cod %in% mycolsPES, ]
dicdom2008 <- dicdom2008[cod %in% mycolsDOM, ]
# create end position of Variables
dicdom2008$fim <- dicdom2008$inicio + dicdom2008$tamanho -1
head(dicdom2008)
tail(dicdom2008)
# Read the data file .txt file
datafile <- "./data/PNAD2008/DOM2008.txt"
pnad2008dom <- read_fwf(datafile,
fwf_positions(start=dicdom2008$inicio,
end=dicdom2008$fim,
col_names = dicdom2008$cod))
# make sure all Variables are 'numeric' class
pnad2008dom <- as.data.table(data.matrix(pnad2008dom))
# lower case column names
colnames(pnad2008dom) <- tolower(colnames(pnad2008dom))
setDT(pnad2008dom)
pnad2008dom[uf < 20, region :="North"]
pnad2008dom[uf > 20 & uf < 30, region :="Northeast"]
pnad2008dom[uf > 30 & uf < 40, region :="Southeast"]
pnad2008dom[uf > 40 & uf < 50, region :="South"]
pnad2008dom[uf > 50 & uf < 60, region :="Midwest"]
table(pnad2008dom$region)
pnad2008dom[v4105<4, urban := "Urban"]
pnad2008dom[v4105>3 & v4105<9, urban := "Rural"]
table(pnad2008dom$urban)
table(pnad2008dom$v2032)
pnad2008[, v2032 := as.character(v2032)]
pnad2008dom[v2032==2, v2032 := "Car"]
table(pnad2008dom$v2032)
pnad2008dom[v2032==2, v2032 := "Car"]
pnad2008dom[v2032==4, v2032 := "Motorcycle"]
pnad2008dom[v2032==6, v2032 := "Car + Motorcycle"]
pnad2008dom[v2032==8, v2032 := "None"]
pnad2008dom[v2032==0, v2032 := NA]
table(pnad2008dom$v2032)
pnad2008dom <- read_fwf(datafile,
fwf_positions(start=dicdom2008$inicio,
end=dicdom2008$fim,
col_names = dicdom2008$cod))
pnad2008dom <- as.data.table(data.matrix(pnad2008dom))
# lower case column names
colnames(pnad2008dom) <- tolower(colnames(pnad2008dom))
pnad2008dom[, v2032 := as.character(v2032)]
pnad2008dom[v2032==2, v2032 := "Car"]
pnad2008dom[v2032==4, v2032 := "Motorcycle"]
pnad2008dom[v2032==6, v2032 := "Car + Motorcycle"]
pnad2008dom[v2032==8, v2032 := "None"]
pnad2008dom[v2032==0, v2032 := NA]
table(pnad2008dom$v2032)
# Dummy for Vehicle ownership Variable, make it compatible with PNAD
pnad2008dom[, dummyVehicle := ifelse(v2032=="None" , 0, 1)] # If person declared height of 0 cm, consider it a missing value, otherwise, convert it to meters unit
table(pnad2008dom$v2032)
pnad2008dom[, dummyVehicle := ifelse(v2032=="None" , 0, 1)]
table(pnad2008dom$v2032)
rm(pnad2008dom$dummyVehicle)
table(pnad2008dom$dummyVehicle)
pnad2008dom$dummyVehicle <- NULL
table(pnad2008dom$dummyVehicle)
pnad2008dom[, dummyVehicle := ifelse(v2032=="None" , 0, 1)]
table(pnad2008dom$v2032)
table(pnad2008dom$dummyVehicle)
33776 +  6306 + 10725
pnad2008dom$dummyVehicle <- factor(pnad2008dom$dummyVehicle, levels=c(1,0),
labels=c("Yes","No"))
table(pnad2008dom$dummyVehicle)
saveRDS(pnad2008, file="./data/pnad2008.Rds")
saveRDS(pnad2008dom, file="./data/pnad2008dom.Rds")
gc(reset = T)
pns2013 <- readRDS("./data/pns2013.Rds")
pnad2008 <- readRDS("./data/pnad2008.Rds")
pns2013dom <- readRDS("./data/pns2013dom.Rds")
pnad2008dom <- readRDS("./data/pnad2008dom.Rds")
# Keep only important variables
#pnad2008 <- select(pnad2008, v0101,uf,v0102,v0103,v0403,v4729,v4609, v4732,v8005,v0302,v0404,v4803,v4838,v4728,v4727,v0602,v9005,v4805,v4706,v4810,v4720,v4721,v4721,v4745,v9054,v9055,v9056,v9057,v1409,v14091,v1410,v1411, v4602, v4618, v4617, upa, region, AGE,agegroup, urban, metro, DecileBR,Vcount, v1410mod,v1411mod,v9057mod,actv_commutetime30,pre_wgt)
pns2013 <- select(pns2013,
V0031,   # pnad compat_ metropolitan area
V0026,   # pnad compat_ urban
v4745,   # pnad compat_ Educational attainment
v0302,   # pnad compat_ Sex
v4727,   # pnad compat_ Metropolitan area
v1410,   # pnad compat_ Active Travel
v2032,  # pnad compat_ Car or motorcycle ownership
V0001,   # state
C006,    # sex
C009,    # race
C008,    # age
VDD004,  # Educational attainment
P040,    # Active commute
P04101,  # Active commute time (hours)
P04102,  # Active commute time (minutes)
P04301, # active travel to habitual activities
P04302, # active travel time to habitual activities
P00101, # Weight
P00401, # Height
N001, # health perception
O009, # car accident
O011, # travel mode when injured
O014, # accident hindered habitual activities
O020, # any sequel and / or disability due to this traffic accident
Q002, # Ever diagnosed with hypertension
Q003, # age at diagnosis for hypertension
Q030, # Ever diagnosed with diabetes
Q031, # age at diagnosis for diabetes
Q060, # Ever diagnosed with high cholesterol
Q061,  # age at diagnosis for high cholesterol
V0025,   # person selected for long questionaire
M001,    # Type of interview
UPA_PNS, # UPA
V0024,   # Strata
V0029,   # person sample weight without calibratio
V00291,  # person sample weight with calibration
V00292,  # Population projection
V00283,  # DomÃƒ­nio de pÃƒÂ³s-estrato 1
V00293,  # DomÃƒ­nio de pÃƒÂ³s-estrato 2
A01817,  # Motorcycle ownership
A020,    # Car ownership (number of cars)
v2032,   # Vehicle in the household, compatible with PNAD
dummyVehicle,
v1410, # dummy active travel , compatible with PNAD
year, region,
AGE, agegroup, edugroup, urban, metro, vcount,
actv_commutetime30, actv_commutetime,actv_traveltimehabacts,total_actvtraveltime, physicallyactive30, # commute variables
totalhouseholdincome, v4721, decileBR, quintileBR, quintileRegion, quartileRegion, quintileMetro, quartileMetro) # income variables
anyNA(pns2013$V00291)
length(which(is.na(pns2013$V00291)))
# Subset PNS with individuals who answered the detailed questionnaire only
# This eliminates observations with missing values in the weight variable
#PNS2013pesDet <- PNS2013pes[!(is.na(PNS2013pes$V0029))]
pns2013Det <- pns2013[M001==1, ]
#define como imputar variancia quando houver apenas um domicilio (PSU) no estrato
# set R to produce conservative standard errors instead of crashing - http://r-survey.r-forge.r-project.org/survey/exmample-lonely.html
options( survey.lonely.psu = "adjust" )  # ??survey.lonely.psu
#Cria objeto de desenho da amostra
sample.pns13 <- svydesign(data = pns2013Det,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V0029, #PesoPessoa: usar peso original
nest = TRUE
)
## Agora ÃƒÂ© preciso pÃƒÂ³s-estratificar:
## A definiÃƒÂ§ÃƒÂ£o dos pÃƒÂ³s-estratos e os totais populacionais usados sÃƒÂ£o dados por:
## post-estratification of sample design
post_pop <- unique( subset(pns2013Det, select= c(V00293,V00292) ))
names(post_pop)<-c("V00293","Freq")
sample.pns13.pos <- postStratify(sample.pns13, ~V00293, post_pop)
#Subset design population above 18 years old
pns13.18y.design <- subset(sample.pns13.pos, C008>17)
############## PNAD Create survey design  -----------
#define como imputar variancia quando houver apenas um domicilio (PSU) no estrato
options( survey.lonely.psu = "adjust" )  # ??survey.lonely.psu
#Cria objeto de desenho da amostra
sample.pnad08 <- svydesign(
data = pnad2008,
id = ~v4618, #PSU
strata = ~v4617, #Strat
weights = ~pre_wgt, #person weight v4729
nest = TRUE
)
# postStratify pnad2008 (Djalma suggestion)
post.pop <- unique(data.frame(v4609=as.character(pnad2008$v4609), Freq= as.numeric(pnad2008$v4609)))
sample.pos <- postStratify(design=sample.pnad08, strata=~v4609, population=post.pop)
# Subset Survey design of people above 18 years old in order to make PNAD
# compatible with PNS, in which only people above 18 answer the detailed quest
pnad08.18y.design <- subset(sample.pos, v8005>=17)
##### Household Design  -----------
# PNAD households Survey design
# This eliminates observations with missing values in the weight variable
summary(pnad2008dom$v4611)
pnad2008dom <- pnad2008dom[!(is.na(pnad2008dom$v4611))]
options( survey.lonely.psu = "adjust" )
pnad08dom.design <- svydesign(data = pnad2008dom,
id = ~v4618, #PSU
strata = ~v4617, #Strat
weights = ~v4611, #household weight
nest = TRUE)
# PNS households Survey design
length(which(is.na(pns2013dom$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013dom <- pns2013dom[!(is.na(pns2013dom$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013dom,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
# clean objects and memory
rm(list=setdiff(ls(), c("pns13dom.design", "pnad08dom.design", "pns13.18y.design", "pnad08.18y.design", "pnad2008", "pns2013") ))
gc(reset = T)
save( pnad08.18y.design , file = './data/pnad08.18y.design.rda' )
save( pns13.18y.design , file = './data/pns13.18y.design.rda' )
load('./data/pnad08.18y.design.rda')
load('./data/pns13.18y.design.rda')
######################!!!!!! RESULTS   RESULTS  RESULTS ######################
######################!!!!!! RESULTS   RESULTS  RESULTS ######################
######################!!!!!! RESULTS   RESULTS  RESULTS ######################
# Create Basic Aesthetic stantard for the plots
baseplot <- theme_minimal() +
theme(
axis.text  = element_text(face="bold"),
strip.text = element_text(size = 11, face ="bold"),
legend.text = element_text(size = 11)
)
tab1_year <- svyby(~factor( dummyVehicle=="Yes") ,
~quintileBR+year, svyciprop ,
design = pns13.18y.design ,
vartype="ci", level = 0.95) %>% setDT()
tab1_sex <- svyby(~factor( dummyVehicle=="Yes") ,
~quintileBR+v0302, svyciprop ,
design = pns13.18y.design ,
vartype="ci", level = 0.95) %>% setDT()
tab1_edu <- svyby(~factor( dummyVehicle=="Yes" ) ,
~quintileBR+edugroup, svyciprop , # edugroup v4745
design = pns13.18y.design ,
vartype="ci", level = 0.95) %>% setDT()
tab1_age <- svyby(~factor( dummyVehicle=="Yes") ,
~quintileBR+AGE, svyciprop ,
design = pns13.18y.design ,
vartype="ci", level = 0.95) %>% setDT()
tab1_actvcommute <- svyby(~factor( dummyVehicle=="Yes" ) ,
~quintileBR+P040, svyciprop ,
design = pns13.18y.design ,
vartype="ci", level = 0.95) %>% setDT()
beep() # beep alert
tab1_year$var <- "Year"
tab1_sex$var <- "Sex"
tab1_age$var <- "Age"
tab1_edu$var <- "Education"
tab1_actvcommute$var <- "Active Commute"
# get all subtables into a list
#tab1_list <- list(tab1_actvcommute, tab1_age, tab1_edu, tab1_sex, tab1_year)
tab1_list <- list(tab1_year, tab1_sex, tab1_edu, tab1_age, tab1_actvcommute)
# change name of sub-tables' columns so we can stack them up
tab1_list <- lapply(tab1_list, setNames, c("quintileBR", "value","Proportion", "ci_l", "ci_u", "var"))
# stack sub-tables from a list into a single data.frame
tab1 <- rbindlist(tab1_list)
# Reorder values and labels
tab1$value <- reorder(tab1$value, tab1$Proportion) # reorder factor levels by poportion values
# add labels to income variable
tab1[, quintileBR := factor(quintileBR, levels=c(1:5), labels = c("Q1 (poorest)","Q2","Q3","Q4","Q5 (richest)"))]
# save table 1
write_csv(tab1, path="./output_tables/tab1.csv")
tab1 <- fread("./output_tables/tab1.csv")
# edit text breaks for plot
tab1[ value== "Uneducated + Incomplete primary school", value := "Uneducated + Incomplete\nprimary school"]
tab1[ value== "Complete high school", value := "Complete\nhigh school"]
tab1[ value== "Complete primary school", value := "Complete\nprimary school"]
# change order or plot facets
tab1[, var := factor(var, levels=c( "Year", "Sex", "Education", "Age", "Active Commute"))]
tab1[, value := factor(value, levels=c("2013", "Women",  "Men"
, "18-24", "25-34", "35-44", "45-54", "55-64", "65+"
, "Uneducated + Incomplete\nprimary school", "Complete\nprimary school", "Complete\nhigh school", "University degree"
, "No", "Yes, part of the journey", "Yes, all the journey"))]
plot1a <-
ggplot(data=subset(tab1, var %in% c("Year", "Sex")) ) +
geom_point( aes(x=value, y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=value, y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var , scales = "free_x", space="free") +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
# colored chart
# scale_colour_brewer(palette = "Greys") + scale_fill_brewer(palette = "Greys")
# scale_fill_viridis(discrete=T) +  scale_color_viridis(discrete=T)
# scale_fill_manual(values = wes_palette("Royal1"), guide = guide_legend(title = NULL)) +
# scale_color_manual(values = wes_palette("Royal1"), guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top")
plot1b <-
ggplot(data=subset(tab1, var %in% c("Age")) ) +
geom_point( aes(x=value, y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=value, y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var , scales = "free_x", space="free") +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top")
plot1c <-
ggplot(data=subset(tab1, var %in% c("Education")) ) +
geom_point( aes(x=value, y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=value, y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var , scales = "free_x", space="free") +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top") +
theme(legend.position="none")
plot1d <-
ggplot(data=subset(tab1, var %in% c("Active Commute")) ) +
geom_point( aes(x=value, y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=value, y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var , scales = "free_x", space="free") +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top")  +
theme(legend.position="none")
# Arrange sub-plots  adding two empty plots to increasing the space between plots
fig1 <- plot_grid(plot1a, plot1b, NULL,NULL, plot1c, plot1d,
labels=c('A', 'B','','','C',"D"),
nrow = 3, rel_heights = c(1, 0.1, 1))
fig1
ggsave(fig1, file="./plots/fig1.png", dpi = 800,
width = 35, height = 20, units = "cm")
tab2_pns_total <- svyby(~ dummyVehicle=="Yes" ,
~quintileBR+year, svymean ,
design = pns13.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pns_urban <- svyby(~ dummyVehicle=="Yes" ,
~quintileBR+urban+year, svymean ,
design = pns13.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pns_region <- svyby(~ dummyVehicle=="Yes" ,
~quintileRegion+region+year, svymean ,
design = pns13.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pns_metro <- svyby(~ dummyVehicle=="Yes" ,
~quintileMetro+metro+year, svymean ,
design = pns13.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
# PNAD subtables
tab2_pnad_total <- svyby(~ dummyVehicle=="Yes" ,
~quintileBR+year, svymean ,
design = pnad08.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pnad_urban <- svyby(~ dummyVehicle=="Yes" ,
~quintileBR+urban+year, svymean ,
design = pnad08.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pnad_region <- svyby(~ dummyVehicle=="Yes" ,
~quintileRegion+region+year, svymean ,
design = pnad08.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pnad_metro <- svyby(~ dummyVehicle=="Yes" ,
~quintileMetro+metro+year, svymean ,
design = pnad08.18y.design ,
vartype="ci", level = 0.95, na.rm=T) %>% setDT()
tab2_pns_total$var <- "Total"
tab2_pns_urban$var <- "Urban"
tab2_pns_region$var <- "Region"
tab2_pns_metro$var <- "Metropolitan Area"
tab2_pnad_total$var <- "Total"
tab2_pnad_urban$var <- "Urban"
tab2_pnad_region$var <- "Region"
tab2_pnad_metro$var <- "Metropolitan Area"
beep() # beep alert
# organize total subtables
tab2_total <- rbind(tab2_pns_total, tab2_pnad_total)
tab2_total <- tab2_total[, c(1,2,4,6,8,9), with=FALSE]
colnames(tab2_total) <- c("quintileBR", "year", "Proportion", "ci_l", "ci_u" , "var")
tab2_total$value <- "Brazil"
setcolorder(tab2_total, neworder = c("quintileBR", "value", "year", "Proportion", "ci_l", "ci_u", "var") )
# get all subtables into a list
tab2_list <- list(tab2_pns_urban, tab2_pns_region, tab2_pns_metro, tab2_pnad_urban, tab2_pnad_region, tab2_pnad_metro)
#keep selected columns
tab2_list <- lapply(tab2_list, function(x) { x <- x[, c(1,2,3,5,7,9,10), with=FALSE] } )
# change name of sub-tables' columns so we can stack them up
tab2_list <- lapply(tab2_list, setNames, c("quintileBR", "value", "year","Proportion", "ci_l", "ci_u", "var"))
# stack all sub-tables into a single data.frame
tab2 <- rbindlist(tab2_list)
tab2 <- rbind(tab2, tab2_total)
# add labels to income variable
tab2[, quintileBR := factor(quintileBR, levels=c(1:5), labels = c("Q1 (poorest)","Q2","Q3","Q4","Q5 (richest)"))]
write_csv(tab2, path="./output_tables/tab2.csv")
# edit text breaks for plot
tab2[ value== "Non-metropolitan area", value := "Non-metropolitan\narea"]
tab2[ value== "Belo Horizonte", value := "Belo\nHorizonte"]
tab2[ value== "Porto Alegre", value := "Porto\nAlegre"]
tab2[ value== "Federal District", value := "Federal\nDistrict"]
tab2[ value== "Rio de Janeiro", value := "Rio\nde Janeiro"]
tab2[ value== "Sao Paulo", value := "Sao\nPaulo"]
# Reorder values and labels
tab2$value <- reorder(tab2$value, tab2$Proportion) # reorder factor levels by poportion values
# change order or plot facets
tab2[, var := factor(var, levels=c( "Total", "Urban", "Region", "Metropolitan Area"))]
tab2[, year := factor(year, levels=c( 2008, 2013))]
plot2a <-
ggplot(data=subset(tab2, var %in% c("Total", "Urban")) ) +
geom_point( aes(x=as.factor(year), y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=as.factor(year), y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var+value , scales = "free_x", space="free", labeller = label_bquote(cols = .(value) ))  +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
# colored chart
# scale_colour_brewer(palette = "Greys") + scale_fill_brewer(palette = "Greys")
# scale_fill_viridis(discrete=T) +  scale_color_viridis(discrete=T)
# scale_fill_manual(values = wes_palette("Royal1"), guide = guide_legend(title = NULL)) +
# scale_color_manual(values = wes_palette("Royal1"), guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent, limits=c(0,1)) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top") +
theme(plot.margin = unit(c(1,1,2,1), "cm"))
plot2b <-
ggplot(data=subset(tab2, var %in% c("Region")) ) +
geom_point( aes(x=as.factor(year), y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=as.factor(year), y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var+value , scales = "free_y", space="free", labeller = label_bquote(cols = .(value) ))  +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent, limits=c(0,1)) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top") +
theme(plot.margin = unit(c(1,1,2,1), "cm"))
plot2c <-
ggplot(data=subset(tab2, var %in% c("Metropolitan Area")) ) +
geom_point( aes(x=as.factor(year), y=Proportion, color=quintileBR, fill=quintileBR), size=3, shape=21 ) +
geom_errorbar( aes(x=as.factor(year), y=Proportion, ymin=ci_u, ymax=ci_l, color=quintileBR),  size=0.5, width = 0) +
facet_grid( .~var+value , scales = "free_y", space="free", labeller = label_bquote(cols = .(value) ))  +
baseplot +
scale_colour_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_fill_grey( start = 0, end = 0.8, guide = guide_legend(title = NULL)) +
scale_y_continuous(labels = scales::percent, limits=c(0,1)) +
theme(axis.title.x  = element_blank()) +
theme(legend.position = "top") +
theme(plot.margin = unit(c(1,1,2,1), "cm")) +
theme(legend.position="none")
plot2a <- ggdraw(plot2a) +
draw_plot_label("A", size = 14) +
draw_label("Country",  x = 0.5, y = .075,
size = 14, fontface = 'bold')
plot2b <- ggdraw(plot2b) +
draw_plot_label("B", size = 14) +
draw_label("Region",  x = 0.5, y = .075,
size = 14, fontface = 'bold')
plot2c <- ggdraw(plot2c) +
draw_plot_label("C", size = 14) +
draw_label("Metropolitan Area",  x = 0.5, y = .075,
size = 14, fontface = 'bold')
fig2 <- plot_grid(arrangeGrob(plot2a, plot2b, ncol = 2), plot2c, ncol = 1)
fig2
ggsave(fig2, file="./plots/fig2.png", dpi = 800,
width = 42, height = 22, units = "cm")
