geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
library(maps)
ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group), fill="gray", color="white") +
geom_point(data=largecities, aes(x=long, y=lat, size=pop, color=pop)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(61, 90, 0)) +
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE)
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE) %>% setDT()
df <- read.table(textConnection("                      marker alleleA alleleB   X818 X818.1 X818.2   X345 X345.1 X345.2   X346 X346.1 X346.2
1   kgp5209280_chr3_21902067       T       A 0.0000 1.0000 0.0000 1.0000 0.0000 0.0000 0.0000 1.0000 0.0000
2 chr3_21902130_21902131_A_T       A       T 0.8626 0.1356 0.0018 0.7676 0.2170 0.0154 0.8626 0.1356 0.0018
3 chr3_21902134_21902135_T_C       T       C 0.6982 0.2854 0.0164 0.5617 0.3749 0.0634 0.6982 0.2854 0.0164"), header=TRUE)
df
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F);
library(data.table)
library(reshape)
library(pbapply)
library(ggplot2)
library(magrittr
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F);
rm(df)
df <- data.table(ID=c(1L,1L,1L,1L,2L,2L,3L,3L),
var=c(1:8),
Smoke=c('No','No','Yes','No','No','No','Yes',
'No'),stringsAsFactors=F)
df
dcast(df, ID ~ Smoke)
dcast(df, var ~ Smoke)
read.excel <- function(header=TRUE,...) { read.table("clipboard",sep="\t",header=header,...) }
df <- read.excel()
df
dcast(df)
dput(df)
df2 <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
df2
### DECAST MEL  REshape
# ftp://cran.r-project.org/pub/R/web/packages/data.table/vignettes/datatable-reshape.html
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
DT
colnames(DT) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
DT.m1 = melt(DT, id.vars = c("family_id", "age_mother"),
measure.vars = c("dob_child1", "dob_child2", "dob_child3"))
DT.m1
DT.m1 = melt(DT, measure.vars = c("dob_child1", "dob_child2", "dob_child3"),
variable.name = "child", value.name = "dob")
head(DT.m1)
dcast(DT.m1, family_id + age_mother ~ child, value.var = "dob")
DT.m1
DT.m1
DT2 <- DT
colnames(DT2) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT
DT2
DT
melt(DT, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
head(DT)
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "acess", value.name = "year")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
DT
colnames(DT2) <- c('origin', 'year', 'acess1', 'acess2', 'acess3')
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
head(DT)
DT2 <- DT
colnames(DT2) <- c('origin', 'year', 'acess1', 'acess2', 'acess3')
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "access")
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "decile", value.name = "year")
DT
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "decile", value.name = "acess")
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT2
colnames(DT2) <- c('origin', 'decile', 'acess1', 'acess2', 'acess3')
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1 <-  melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
rep(2000, 2)
DT2.m1$year <- c(rep(2000, 5), rep(2010, 5), rep(2020, 5))
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
DT.m1
DT <- structure(list(family_id = 1:5, age_mother = c(30L, 27L, 26L,
32L, 29L), dob_child1 = structure(c(5L, 4L, 3L, 2L, 1L), .Label = c("05/12/2000",
"10/10/2004", "11/07/2002", "22/06/1996", "26/11/1998"), class = "factor"),
dob_child2 = structure(c(4L, NA, 1L, 2L, 3L), .Label = c("05/04/2004",
"27/08/2009", "28/02/2005", "29/01/2000"), class = "factor"),
dob_child3 = structure(c(NA, NA, 1L, 2L, NA), .Label = c("02/09/2007",
"21/07/2012"), class = "factor")), .Names = c("family_id",
"age_mother", "dob_child1", "dob_child2", "dob_child3"), class = "data.frame", row.names = c(NA,
-5L))
setDT(DT)
head(DT)
DT
colnames(DT2) <- c('origin', 'decile', 'acess2000', 'acess2010', 'acess2020')
DT2 <- DT
colnames(DT2) <- c('origin', 'decile', 'acess2000', 'acess2010', 'acess2020')
DT2
melt(DT2, measure.vars = c("acess1", "acess2", "acess3"),
variable.name = "year", value.name = "acess")
melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2
DT2.m1 <-  melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2.m1
DT2.m1 <-  melt(DT2, measure.vars = c('acess2000', 'acess2010', 'acess2020'),
variable.name = "year", value.name = "acess")
DT2.m1
dcast(DT2.m1, origin + decile ~ year, value.var = "acess")
DT2.m1
library(beepr)
beep(sound = 1, expr = "ping")
beep(sound = 2, expr = "ping")
beep(sound = 3)
beep(sound = 4)
beep(sound = 5)
beep(sound = 6)
beep(sound = 7)
beep(sound = 8)
beep(sound = 8)
beep(sound = 9)
beep(sound = 10)
beep(sound = 11)
beep(sound = 12)
beep(sound = 1)
beep(sound = 4)
beep(sound = 14)
beep(sound = 18)
beep(sound = 19)
beep()
beep(0)
beep(0)
beep(0)
http://zevross.com/blog/2015/03/30/map-and-analyze-raster-data-in-r/
#### GeoTIFF ---------------------
library(rasterVis)
library(ggplot2)
http://zevross.com/blog/2015/03/30/map-and-analyze-raster-data-in-r/
#### GeoTIFF ---------------------
library(raster)
relevo <- raster("C:/Users/rafa/Desktop/relevo2tif/relevo2.tif.0.tif")
relevo_spdf <- as(relevo, "SpatialPixelsDataFrame")
plot(relevo_spdf)
relevo <- as.data.frame(relevo_spdf) %>%
rename(value = `X02.relief.georef.clipped.resampled`)
library(magrittr)
relevo2 <- as.data.frame(relevo_spdf) %>%
rename(value = `X02.relief.georef.clipped.resampled`)
library(plyr)
relevo2 <- as.data.frame(relevo_spdf) %>%
rename(value = `X02.relief.georef.clipped.resampled`)
relevo2 <- as.data.frame(relevo_spdf)
head(relevo2)
relevo2 <- as.data.frame(relevo_spdf) %>%
rename(value = 'relevo2.tif.0')
ggplot() +
# raster comes as the first layer, municipalities on top
geom_raster(data = relevo2, aes(x = x,
y = y,
alpha = relevo2.tif.0))
relevo <- raster("C:/Users/rafa/Desktop/relevo2tif/relevo2.tif.0.tif")
relevo_spdf <- as(relevo, "SpatialPixelsDataFrame")
relevo2 <- as.data.frame(relevo_spdf) %>% setDT() %>% setnames(., 'relevo2.tif.0', 'value')
library(data.table)
relevo <- raster("C:/Users/rafa/Desktop/relevo2tif/relevo2.tif.0.tif")
relevo_spdf <- as(relevo, "SpatialPixelsDataFrame")
relevo <- raster("C:/Users/rafa/Desktop/relevo2tif/relevo2.tif.0.tif")
relevo_spdf <- as(relevo, "SpatialPixelsDataFrame")
relevo2 <- as.data.frame(relevo_spdf) %>% setDT() %>% setnames(., 'relevo2.tif.0', 'value')
a  <- ggplot() +
# raster comes as the first layer, municipalities on top
geom_raster(data = relevo2, aes(x = x, y = y, alpha = relevo2.tif.0)) +
scale_alpha(name = "", range = c(0.2, 0), guide = F)  +
coord_equal() +
theme_map()
library(ggthemes)
a  <- ggplot() +
# raster comes as the first layer, municipalities on top
geom_raster(data = relevo2, aes(x = x, y = y, alpha = relevo2.tif.0)) +
scale_alpha(name = "", range = c(0.2, 0), guide = F)  +
coord_equal() +
theme_map()
ggsave(a, filename="a.png", width = 30, height = 15, units = "cm")
a  <- ggplot() +
# raster comes as the first layer, municipalities on top
geom_raster(data = relevo2, aes(x = x, y = y, alpha = value)) +
scale_alpha(name = "", range = c(0.2, 0), guide = F)  +
coord_equal() +
theme_map()
ggsave(a, filename="a.png", width = 30, height = 15, units = "cm")
beep()
head(relevo2)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(alpha = year))
data(mpg)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(alpha = year))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(alpha = year))
p <- ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(alpha = year))
p
p + scale_alpha("cylinders")
p + scale_alpha(range = c(0.4, 0.8))
ggplot(mpg, aes(displ, hwy, alpha = year)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point()
ggplot(data=mpg, aes(displ, hwy)) +
geom_point()
install.packages(“RODBC”)
install.packages("RODBC")
library(Hmisc)
d <- mdb.get("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb")
d <- mdb.get("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb",
tables=TRUE)
install.packages("RODBC")
library(Hmisc)
d <- mdb.get("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb",
tables=TRUE)
d <- mdb.get("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb",
tables=TRUE)
d <- odbcConnect("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb",
tables=TRUE)
library(RODBC)
d <- odbcConnect("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb",
tables=TRUE)
d <- odbcConnect("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb")
d <- odbcConnectAccess("R:/Dropbox/bases_de_dados/O-D Rio_2003/OD_RMRJ-v1/OD_RMRJ-v1.mdb")
##################### Load packages -------------------------------------------------------
library(rgeos)      # to get centroid of polygons using gCentroid
library(data.table) # to manipulate data frames (read.csv is ultrafast for reading CSV files)
library(ggplot2)    # to make charts and maps
library(ggmap)      # to use google map tiles
library(maptools)   # to readShapeSpatial
library(dplyr)      # to manipulate data frames
library(foreign)    # to export DF to other formats
library(spatialEco) # Overlay points and polygons point.in.poly()
library(fasttime)   # Fast version of as.POSIXct.character for GMT fixed format
library(pbapply)  # to include progress bar in apply
library(beepr)        # Beeps at the end of the command
library(rgdal)
library(readr)
library(viridis)
options(digits=10)   # number of digits to show
options(scipen=999) # disable scientific notation
install.packages("sf")
library(sf)
f <- st_read('R:/Dropbox/Dout/Data Dout/Spatial Grid/hexriopoly500.shp')
plot(f)
system.time( hexriopoly500 <- readOGR(dsn = 'R:/Dropbox/Dout/Data Dout/Spatial Grid', layer ='hexriopoly500') )
system.time( h <- st_read('R:/Dropbox/Dout/Data Dout/Spatial Grid/hexriopoly500.shp') )
head(h)
h_df <- fortify(h, region="idhex500")
head(h_df)
ggplot() +
geom_polygon(data= h_df , aes(long, lat, group = group))
system.time( h <- st_read('R:/Dropbox/Dout/Data Dout/Spatial Grid/hexriopoly500.shp') )
plot(h)
ggplot() +
geom_polygon(data= h_df , aes(X, Y, group = group))
ggplot() +
geom_polygon(data= h_df , aes(x, y, group = group))
a <- SpatialPolygonsDataFrame(h)
View(h)
head(f)
h[1]
f[2]
f[[2]]
plot(f[[2]])
setwd("R:/Dropbox/github/active_travel_brazil") # test
source("./R-scripts/0 LoadPackages.R")
pns2013dom <- read_PNS("domicilios", i = 2013, root_path = "./data")
setDT(pns2013dom)
changeCols <- colnames(pns2013dom)[6:69]
pns2013dom[,(changeCols):= lapply(.SD, as.numeric), .SDcols = changeCols]
gc(reset = T)
## Indicate which columns will be read from .txt files
myvariblesPES <- c(
"V0001"     # state
, "C006"      # sex
, "C009"      # race
, "C008"      # age
, "VDD004"    # Educational attainment
, "P040"      # Active commute
, "P04101"    # Active commute time (hours)
, "P04102"    # Active commute time (minutes)
, "P04301"    # active travel to habitual activities
, "P04302"    # active travel time to habitual activities
, "P00101"    # Weight
, "P00401"    # Height
, "N001"      # health perception
, "O009"      # car accident
, "O011"      # travel mode when injured
, "O014"      # accident hindered habitual activities
, "O020"      # any sequel and / or disability due to this traffic accident
, "Q002"      # Ever diagnosed with hypertension
, "Q003"      # age at diagnosis for hypertension
, "Q030"      # Ever diagnosed with diabetes
, "Q031"      # age at diagnosis for diabetes
, "Q060"      # Ever diagnosed with high cholesterol
, "Q061"      # age at diagnosis for high cholesterol
, "V0025"     # person selected for long questionaire
, "M001"      # Type of interview
, "UPA_PNS"   # UPA
, "V0024"     # Strata
, "V0029"     # person sample weight without calibratio
, "V00291"    # person sample weight with calibration
, "V00292"    # Population projection
, "V00283"    # Dominio de pos-estrato 1
, "V00293"    # Dominio de pos-estrato 2
, "C004"      # Condição no domicílio
, "V0006_PNS" # Número de ordem do domicílio na PNS
, "E01602"   # Income
, "E01604"    # Income
, "E01802"    # Income
, "E01804"    # Income
, "F00102"    # Income
, "F00702"    # Income
, "F00802"    # Income
, "VDF00102"    # Income
)
# read data
pns2013pes <- read_PNS('pessoas', 2013,
vars_subset = myvariblesPES,
root_path = "./data")
# make sure numeric variables are 'numeric' class
setDT(pns2013pes)
changeCols <- colnames(pns2013pes)[5:42]
pns2013pes[,(changeCols):= lapply(.SD, as.numeric), .SDcols = changeCols]
rm(list=setdiff(ls(), c("pns2013pes", "pns2013dom")))
gc(reset = T)
########## 2. Recode Household data  ----------------
# set data.table
setDT(pns2013dom)
# Urban vs Rural areas
pns2013dom[V0026==1, urban := "Urban"]
pns2013dom[V0026==2, urban := "Rural"]
# Vehicle ownership Variable, make it compatible with PNAD
pns2013dom[A01817 ==2 & A020 >0, v2032 := "Car"] #  2
pns2013dom[A01817 ==1 & A020 <1, v2032 := "Motorcycle"] #  4
pns2013dom[A01817 ==1 & A020 >0, v2032 := "Car + Motorcycle"] # 6
pns2013dom[A01817 ==2 & A020 <1, v2032 := "None"] # 8
# Dummy for Vehicle ownership Variable, make it compatible with PNAD
pns2013dom[, dummyVehicle := ifelse(v2032=="None" , 0, 1)] # If person declared height of 0 cm, consider it a missing value, otherwise, convert it to meters unit
pns2013dom$dummyVehicle <- factor(pns2013dom$dummyVehicle, levels=c(1,0),
labels=c("Yes","No"))
table(pns2013dom$dummyVehicle)
pns2013pes[ C004 <17 , v4721 := sum( E01602, E01604, E01802, E01804, F00102, F00702, F00802, VDF00102, na.rm = T) ,
by= .(V0001, V0024, UPA_PNS, V0006_PNS)] # sum all income sources
summary(pns2013$v4721)
summary(pns2013pes$v4721)
pns2013 <- left_join( pns2013dom, pns2013pes, by=c('V0001', 'V0024', 'UPA_PNS', 'V0006_PNS',
'V0029', 'V00291', 'V00292', 'V00283', 'V00293'))
names(pns2013)
setDT(pns2013)[, RDPC := v4721 / VDC001 ]
summary(pnad2008dom$v4611)
# PNS households Survey design
length(which(is.na(pns2013dom$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013dom <- pns2013dom[!(is.na(pns2013dom$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013dom,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
head( table(pns2013$RDPC))
setDT(pns2013)[, RDPC := (v4721 / VDC001, na.rm=T) ]
setDT(pns2013)[, RDPC := v4721 / VDC001 ]
head( table(pns2013$RDPC))
summary(pns2013$RDPC)
ength(which(is.na(pns2013dom$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013dom <- pns2013dom[!(is.na(pns2013dom$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013dom,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
length(which(is.na(pns2013dom$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013dom <- pns2013dom[!(is.na(pns2013dom$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013dom,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
svyquantile(~RDPC, pns13dom.design, c(.25,.5,.75),ci=TRUE, interval.type="score")
length(which(is.na(pns2013$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013 <- pns2013[!(is.na(pns2013$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
svyquantile(~RDPC, pns13dom.design, c(.25,.5,.75),ci=TRUE, interval.type="score")
length(which(is.na(pns2013dom$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns2013dom <- pns2013[!(is.na(pns2013dom$V00281))]   # This eliminates observations with missing values in the weight variable
pns13dom.design <- svydesign(data = pns2013dom,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
pns2013 <- left_join( pns2013dom, pns2013pes, by=c('V0001', 'V0024', 'UPA_PNS', 'V0006_PNS',
'V0029', 'V00291', 'V00292', 'V00283', 'V00293'))
setDT(pns2013)[, RDPC := v4721 / VDC001 ]
length(which(is.na(pns2013$V00281)))   # Count  missing values (NAs), There should be no Missings (NA) in Design Variables
pns13dom.design <- svydesign(data = pns2013,
id = ~UPA_PNS, #PSU
strata = ~V0024, #Strat
weights=~V00281, #Peso household
nest = TRUE  )
svyquantile(~RDPC, pns13dom.design, c(.25,.5,.75),ci=TRUE, interval.type="score")
head( table(pns2013$RDPC))
summary(pns2013$RDPC)
svyquantile(~RDPC, pns13dom.design, c(.25,.5,.75),ci=TRUE, interval.type="score", na.rm=T)
bep()
beep()
table(pns2013$V0015)
head( table(pns2013$RDPC))
svymean(~RDPC, pns13dom.design)
svymean(~RDPC, pns13dom.design, na.rm=T)
summary(pns2013$RDPC)
svyquantile(~RDPC, pns13dom.design, c(.25,.5,.75), na.rm=T)
summary(pns2013$RDPC)
head( table(pns2013$RDPC))
